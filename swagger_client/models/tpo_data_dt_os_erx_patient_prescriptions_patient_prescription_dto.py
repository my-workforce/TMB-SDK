# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prescription_date': 'str',
        'overall_status': 'str',
        'diagnosis': 'list[TpoDataDTOsSharedDiagnosisDTO]',
        'activities': 'list[TpoDataDTOsERXPatientPrescriptionsPrescriptionActivityDTO]'
    }

    attribute_map = {
        'prescription_date': 'PrescriptionDate',
        'overall_status': 'OverallStatus',
        'diagnosis': 'Diagnosis',
        'activities': 'Activities'
    }

    def __init__(self, prescription_date=None, overall_status=None, diagnosis=None, activities=None):  # noqa: E501
        """TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO - a model defined in Swagger"""  # noqa: E501
        self._prescription_date = None
        self._overall_status = None
        self._diagnosis = None
        self._activities = None
        self.discriminator = None
        if prescription_date is not None:
            self.prescription_date = prescription_date
        if overall_status is not None:
            self.overall_status = overall_status
        if diagnosis is not None:
            self.diagnosis = diagnosis
        if activities is not None:
            self.activities = activities

    @property
    def prescription_date(self):
        """Gets the prescription_date of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501


        :return: The prescription_date of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :rtype: str
        """
        return self._prescription_date

    @prescription_date.setter
    def prescription_date(self, prescription_date):
        """Sets the prescription_date of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.


        :param prescription_date: The prescription_date of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :type: str
        """

        self._prescription_date = prescription_date

    @property
    def overall_status(self):
        """Gets the overall_status of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501


        :return: The overall_status of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :rtype: str
        """
        return self._overall_status

    @overall_status.setter
    def overall_status(self, overall_status):
        """Sets the overall_status of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.


        :param overall_status: The overall_status of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :type: str
        """

        self._overall_status = overall_status

    @property
    def diagnosis(self):
        """Gets the diagnosis of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501


        :return: The diagnosis of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :rtype: list[TpoDataDTOsSharedDiagnosisDTO]
        """
        return self._diagnosis

    @diagnosis.setter
    def diagnosis(self, diagnosis):
        """Sets the diagnosis of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.


        :param diagnosis: The diagnosis of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :type: list[TpoDataDTOsSharedDiagnosisDTO]
        """

        self._diagnosis = diagnosis

    @property
    def activities(self):
        """Gets the activities of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501


        :return: The activities of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :rtype: list[TpoDataDTOsERXPatientPrescriptionsPrescriptionActivityDTO]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.


        :param activities: The activities of this TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO.  # noqa: E501
        :type: list[TpoDataDTOsERXPatientPrescriptionsPrescriptionActivityDTO]
        """

        self._activities = activities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsERXPatientPrescriptionsPatientPrescriptionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
