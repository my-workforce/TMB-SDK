# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsSharedPatientDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_type': 'str',
        'member_id': 'str',
        'e_health_id': 'str',
        'nationality': 'str',
        'national_id_number': 'str',
        'first_name': 'str',
        'second_name': 'str',
        'third_name': 'str',
        'last_name': 'str',
        'gender': 'str',
        'date_of_birth': 'str',
        'dob_hijri': 'str',
        'contact_number': 'str',
        'email': 'str',
        'blood_group': 'str',
        'preferred_language': 'str'
    }

    attribute_map = {
        'id_type': 'IdType',
        'member_id': 'MemberID',
        'e_health_id': 'EHealthID',
        'nationality': 'Nationality',
        'national_id_number': 'NationalIDNumber',
        'first_name': 'FirstName',
        'second_name': 'SecondName',
        'third_name': 'ThirdName',
        'last_name': 'LastName',
        'gender': 'Gender',
        'date_of_birth': 'DateOfBirth',
        'dob_hijri': 'DOBHijri',
        'contact_number': 'ContactNumber',
        'email': 'Email',
        'blood_group': 'BloodGroup',
        'preferred_language': 'PreferredLanguage'
    }

    def __init__(self, id_type=None, member_id=None, e_health_id=None, nationality=None, national_id_number=None,
                 first_name=None, second_name=None, third_name=None, last_name=None, gender=None, date_of_birth=None,
                 dob_hijri=None, contact_number=None, email=None, blood_group=None,
                 preferred_language=None):  # noqa: E501
        """TpoDataDTOsSharedPatientDTO - a model defined in Swagger"""  # noqa: E501
        self._id_type = None
        self._member_id = None
        self._e_health_id = None
        self._nationality = None
        self._national_id_number = None
        self._first_name = None
        self._second_name = None
        self._third_name = None
        self._last_name = None
        self._gender = None
        self._date_of_birth = None
        self._dob_hijri = None
        self._contact_number = None
        self._email = None
        self._blood_group = None
        self._preferred_language = None
        self.discriminator = None
        if id_type is not None:
            self.id_type = id_type
        self.member_id = member_id
        if e_health_id is not None:
            self.e_health_id = e_health_id
        if nationality is not None:
            self.nationality = nationality
        self.national_id_number = national_id_number
        self.first_name = first_name
        if second_name is not None:
            self.second_name = second_name
        if third_name is not None:
            self.third_name = third_name
        if last_name is not None:
            self.last_name = last_name
        self.gender = gender
        self.date_of_birth = date_of_birth
        if dob_hijri is not None:
            self.dob_hijri = dob_hijri
        self.contact_number = contact_number
        if email is not None:
            self.email = email
        if blood_group is not None:
            self.blood_group = blood_group
        self.preferred_language = preferred_language

    @property
    def id_type(self):
        """Gets the id_type of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        IdType Can Be Only:              D005 = Resident Card              D004 = Passport              D002 = GCC ID              D003 = National Card              D001 = Boarder Number  # noqa: E501

        :return: The id_type of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this TpoDataDTOsSharedPatientDTO.

        IdType Can Be Only:              D005 = Resident Card              D004 = Passport              D002 = GCC ID              D003 = National Card              D001 = Boarder Number  # noqa: E501

        :param id_type: The id_type of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._id_type = id_type

    @property
    def member_id(self):
        """Gets the member_id of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        In the case of an insurance patient: The patient's insurance member number  # noqa: E501

        :return: The member_id of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this TpoDataDTOsSharedPatientDTO.

        In the case of an insurance patient: The patient's insurance member number  # noqa: E501

        :param member_id: The member_id of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """
        if member_id is None:
            raise ValueError("Invalid value for `member_id`, must not be `None`")  # noqa: E501

        self._member_id = member_id

    @property
    def e_health_id(self):
        """Gets the e_health_id of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        E-health id.  # noqa: E501

        :return: The e_health_id of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._e_health_id

    @e_health_id.setter
    def e_health_id(self, e_health_id):
        """Sets the e_health_id of this TpoDataDTOsSharedPatientDTO.

        E-health id.  # noqa: E501

        :param e_health_id: The e_health_id of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._e_health_id = e_health_id

    @property
    def nationality(self):
        """Gets the nationality of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient nationality  # noqa: E501

        :return: The nationality of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this TpoDataDTOsSharedPatientDTO.

        Patient nationality  # noqa: E501

        :param nationality: The nationality of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._nationality = nationality

    @property
    def national_id_number(self):
        """Gets the national_id_number of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        The unique number the government assigns to a citizen  # noqa: E501

        :return: The national_id_number of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._national_id_number

    @national_id_number.setter
    def national_id_number(self, national_id_number):
        """Sets the national_id_number of this TpoDataDTOsSharedPatientDTO.

        The unique number the government assigns to a citizen  # noqa: E501

        :param national_id_number: The national_id_number of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """
        if national_id_number is None:
            raise ValueError("Invalid value for `national_id_number`, must not be `None`")  # noqa: E501

        self._national_id_number = national_id_number

    @property
    def first_name(self):
        """Gets the first_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient first name.  # noqa: E501

        :return: The first_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this TpoDataDTOsSharedPatientDTO.

        Patient first name.  # noqa: E501

        :param first_name: The first_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def second_name(self):
        """Gets the second_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient second name.  # noqa: E501

        :return: The second_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._second_name

    @second_name.setter
    def second_name(self, second_name):
        """Sets the second_name of this TpoDataDTOsSharedPatientDTO.

        Patient second name.  # noqa: E501

        :param second_name: The second_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._second_name = second_name

    @property
    def third_name(self):
        """Gets the third_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient third name.  # noqa: E501

        :return: The third_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._third_name

    @third_name.setter
    def third_name(self, third_name):
        """Sets the third_name of this TpoDataDTOsSharedPatientDTO.

        Patient third name.  # noqa: E501

        :param third_name: The third_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._third_name = third_name

    @property
    def last_name(self):
        """Gets the last_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient last name.  # noqa: E501

        :return: The last_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this TpoDataDTOsSharedPatientDTO.

        Patient last name.  # noqa: E501

        :param last_name: The last_name of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def gender(self):
        """Gets the gender of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient gender  Values:  Male  Female  Other  # noqa: E501

        :return: The gender of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this TpoDataDTOsSharedPatientDTO.

        Patient gender  Values:  Male  Female  Other  # noqa: E501

        :param gender: The gender of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Is the date on which a person was born or is officially deemed to have been born.  # noqa: E501

        :return: The date_of_birth of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this TpoDataDTOsSharedPatientDTO.

        Is the date on which a person was born or is officially deemed to have been born.  # noqa: E501

        :param date_of_birth: The date_of_birth of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    @property
    def dob_hijri(self):
        """Gets the dob_hijri of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Is the date in hijri format (dd/MM/yyyy) on which a person was born or is officially deemed to have been born.  # noqa: E501

        :return: The dob_hijri of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._dob_hijri

    @dob_hijri.setter
    def dob_hijri(self, dob_hijri):
        """Sets the dob_hijri of this TpoDataDTOsSharedPatientDTO.

        Is the date in hijri format (dd/MM/yyyy) on which a person was born or is officially deemed to have been born.  # noqa: E501

        :param dob_hijri: The dob_hijri of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._dob_hijri = dob_hijri

    @property
    def contact_number(self):
        """Gets the contact_number of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient contact number  # noqa: E501

        :return: The contact_number of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this TpoDataDTOsSharedPatientDTO.

        Patient contact number  # noqa: E501

        :param contact_number: The contact_number of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """
        if contact_number is None:
            raise ValueError("Invalid value for `contact_number`, must not be `None`")  # noqa: E501

        self._contact_number = contact_number

    @property
    def email(self):
        """Gets the email of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        The personal email address of the patient  # noqa: E501

        :return: The email of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TpoDataDTOsSharedPatientDTO.

        The personal email address of the patient  # noqa: E501

        :param email: The email of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def blood_group(self):
        """Gets the blood_group of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Patient blood group   Values:  O-  O+  A+  A-  B+  B-  AB+  AB-  # noqa: E501

        :return: The blood_group of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._blood_group

    @blood_group.setter
    def blood_group(self, blood_group):
        """Sets the blood_group of this TpoDataDTOsSharedPatientDTO.

        Patient blood group   Values:  O-  O+  A+  A-  B+  B-  AB+  AB-  # noqa: E501

        :param blood_group: The blood_group of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """

        self._blood_group = blood_group

    @property
    def preferred_language(self):
        """Gets the preferred_language of this TpoDataDTOsSharedPatientDTO.  # noqa: E501

        Preferred language.  Values:  En for English  Ar for Arabic  # noqa: E501

        :return: The preferred_language of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :rtype: str
        """
        return self._preferred_language

    @preferred_language.setter
    def preferred_language(self, preferred_language):
        """Sets the preferred_language of this TpoDataDTOsSharedPatientDTO.

        Preferred language.  Values:  En for English  Ar for Arabic  # noqa: E501

        :param preferred_language: The preferred_language of this TpoDataDTOsSharedPatientDTO.  # noqa: E501
        :type: str
        """
        if preferred_language is None:
            raise ValueError("Invalid value for `preferred_language`, must not be `None`")  # noqa: E501

        self._preferred_language = preferred_language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsSharedPatientDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsSharedPatientDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
