# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsAuthorizationAuthorizationActivityDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'code': 'str',
        'quantity': 'float',
        'net': 'float',
        'list': 'float',
        'patient_share': 'float',
        'payment_amount': 'float',
        'denial_code': 'str',
        'observation': 'list[TpoDataDTOsSharedObservationDTO]',
        'comments': 'str'
    }

    attribute_map = {
        'id': 'ID',
        'type': 'Type',
        'code': 'Code',
        'quantity': 'Quantity',
        'net': 'Net',
        'list': 'List',
        'patient_share': 'PatientShare',
        'payment_amount': 'PaymentAmount',
        'denial_code': 'DenialCode',
        'observation': 'Observation',
        'comments': 'Comments'
    }

    def __init__(self, id=None, type=None, code=None, quantity=None, net=None, list=None, patient_share=None,
                 payment_amount=None, denial_code=None, observation=None, comments=None):  # noqa: E501
        """TpoDataDTOsAuthorizationAuthorizationActivityDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._code = None
        self._quantity = None
        self._net = None
        self._list = None
        self._patient_share = None
        self._payment_amount = None
        self._denial_code = None
        self._observation = None
        self._comments = None
        self.discriminator = None
        self.id = id
        self.type = type
        self.code = code
        if quantity is not None:
            self.quantity = quantity
        self.net = net
        if list is not None:
            self.list = list
        if patient_share is not None:
            self.patient_share = patient_share
        self.payment_amount = payment_amount
        if denial_code is not None:
            self.denial_code = denial_code
        if observation is not None:
            self.observation = observation
        if comments is not None:
            self.comments = comments

    @property
    def id(self):
        """Gets the id of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        Unique identifier of activity within an authorization.  # noqa: E501

        :return: The id of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        Unique identifier of activity within an authorization.  # noqa: E501

        :param id: The id of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        The type of activity. 3 = CPT; 4 = HCPCS; 5 = Drug; 6 = Dental; 8 = Service Code; 9 = DRG; 10 = Scientific Code.  # noqa: E501

        :return: The type of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        The type of activity. 3 = CPT; 4 = HCPCS; 5 = Drug; 6 = Dental; 8 = Service Code; 9 = DRG; 10 = Scientific Code.  # noqa: E501

        :param type: The type of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def code(self):
        """Gets the code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        ActivityCode is the code, specified by ActivityType, for the Activity performed.  # noqa: E501

        :return: The code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        ActivityCode is the code, specified by ActivityType, for the Activity performed.  # noqa: E501

        :param code: The code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def quantity(self):
        """Gets the quantity of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        Identifies the number of units (quantity) for a specific Activity.  # noqa: E501

        :return: The quantity of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        Identifies the number of units (quantity) for a specific Activity.  # noqa: E501

        :param quantity: The quantity of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def net(self):
        """Gets the net of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        The net charges billed by the provider to the Payer for this Activity.  # noqa: E501

        :return: The net of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        The net charges billed by the provider to the Payer for this Activity.  # noqa: E501

        :param net: The net of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: float
        """
        if net is None:
            raise ValueError("Invalid value for `net`, must not be `None`")  # noqa: E501

        self._net = net

    @property
    def list(self):
        """Gets the list of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        ActivityList describes the list price before any adjustments of discounts.  # noqa: E501

        :return: The list of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        ActivityList describes the list price before any adjustments of discounts.  # noqa: E501

        :param list: The list of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: float
        """

        self._list = list

    @property
    def patient_share(self):
        """Gets the patient_share of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        Any fee the provider have effectively collected from the patient.  # noqa: E501

        :return: The patient_share of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._patient_share

    @patient_share.setter
    def patient_share(self, patient_share):
        """Sets the patient_share of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        Any fee the provider have effectively collected from the patient.  # noqa: E501

        :param patient_share: The patient_share of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: float
        """

        self._patient_share = patient_share

    @property
    def payment_amount(self):
        """Gets the payment_amount of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        Amount Approved to be paid by the payer for the activity.  # noqa: E501

        :return: The payment_amount of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        Amount Approved to be paid by the payer for the activity.  # noqa: E501

        :param payment_amount: The payment_amount of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: float
        """
        if payment_amount is None:
            raise ValueError("Invalid value for `payment_amount`, must not be `None`")  # noqa: E501

        self._payment_amount = payment_amount

    @property
    def denial_code(self):
        """Gets the denial_code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        The denial code if the Activity is denied by the payer.  # noqa: E501

        :return: The denial_code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._denial_code

    @denial_code.setter
    def denial_code(self, denial_code):
        """Sets the denial_code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        The denial code if the Activity is denied by the payer.  # noqa: E501

        :param denial_code: The denial_code of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: str
        """

        self._denial_code = denial_code

    @property
    def observation(self):
        """Gets the observation of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        Activity Observations.  # noqa: E501

        :return: The observation of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: list[TpoDataDTOsSharedObservationDTO]
        """
        return self._observation

    @observation.setter
    def observation(self, observation):
        """Sets the observation of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        Activity Observations.  # noqa: E501

        :param observation: The observation of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: list[TpoDataDTOsSharedObservationDTO]
        """

        self._observation = observation

    @property
    def comments(self):
        """Gets the comments of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501

        Optional comments by the payer (2000 max chars).  # noqa: E501

        :return: The comments of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.

        Optional comments by the payer (2000 max chars).  # noqa: E501

        :param comments: The comments of this TpoDataDTOsAuthorizationAuthorizationActivityDTO.  # noqa: E501
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsAuthorizationAuthorizationActivityDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsAuthorizationAuthorizationActivityDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
