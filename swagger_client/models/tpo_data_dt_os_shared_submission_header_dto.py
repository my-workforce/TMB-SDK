# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsSharedSubmissionHeaderDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender_id': 'str',
        'receiver_id': 'str',
        'transaction_date': 'str',
        'record_count': 'int',
        'disposition_flag': 'str',
        'payer_id': 'str',
        'transaction_type': 'str'
    }

    attribute_map = {
        'sender_id': 'SenderID',
        'receiver_id': 'ReceiverID',
        'transaction_date': 'TransactionDate',
        'record_count': 'RecordCount',
        'disposition_flag': 'DispositionFlag',
        'payer_id': 'PayerID',
        'transaction_type': 'TransactionType'
    }

    def __init__(self, sender_id=None, receiver_id=None, transaction_date=None, record_count=None,
                 disposition_flag=None, payer_id=None, transaction_type=None):  # noqa: E501
        """TpoDataDTOsSharedSubmissionHeaderDTO - a model defined in Swagger"""  # noqa: E501
        self._sender_id = None
        self._receiver_id = None
        self._transaction_date = None
        self._record_count = None
        self._disposition_flag = None
        self._payer_id = None
        self._transaction_type = None
        self.discriminator = None
        self.sender_id = sender_id
        self.receiver_id = receiver_id
        self.transaction_date = transaction_date
        self.record_count = record_count
        self.disposition_flag = disposition_flag
        self.payer_id = payer_id
        self.transaction_type = transaction_type

    @property
    def sender_id(self):
        """Gets the sender_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501

        Unique identifier of the Provider, Payer or TPA receiving information, as provided by the regulator.  # noqa: E501

        :return: The sender_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this TpoDataDTOsSharedSubmissionHeaderDTO.

        Unique identifier of the Provider, Payer or TPA receiving information, as provided by the regulator.  # noqa: E501

        :param sender_id: The sender_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :type: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")  # noqa: E501

        self._sender_id = sender_id

    @property
    def receiver_id(self):
        """Gets the receiver_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501

        Unique identifier of the Provider, Payer or TPA receiving information, as provided by the regulator.  # noqa: E501

        :return: The receiver_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :rtype: str
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this TpoDataDTOsSharedSubmissionHeaderDTO.

        Unique identifier of the Provider, Payer or TPA receiving information, as provided by the regulator.  # noqa: E501

        :param receiver_id: The receiver_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :type: str
        """
        if receiver_id is None:
            raise ValueError("Invalid value for `receiver_id`, must not be `None`")  # noqa: E501

        self._receiver_id = receiver_id

    @property
    def transaction_date(self):
        """Gets the transaction_date of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501

        System generated date and time specifying when the transaction was generated             Date Time format: DD/MM/YYYYY HH:MM  # noqa: E501

        :return: The transaction_date of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this TpoDataDTOsSharedSubmissionHeaderDTO.

        System generated date and time specifying when the transaction was generated             Date Time format: DD/MM/YYYYY HH:MM  # noqa: E501

        :param transaction_date: The transaction_date of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :type: str
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")  # noqa: E501

        self._transaction_date = transaction_date

    @property
    def record_count(self):
        """Gets the record_count of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501

        Number of sub objects in the file. The file may contain at least 1 record, and may contain more than one depending on the business and validation rules related to that specific transaction.  # noqa: E501

        :return: The record_count of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this TpoDataDTOsSharedSubmissionHeaderDTO.

        Number of sub objects in the file. The file may contain at least 1 record, and may contain more than one depending on the business and validation rules related to that specific transaction.  # noqa: E501

        :param record_count: The record_count of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :type: int
        """
        if record_count is None:
            raise ValueError("Invalid value for `record_count`, must not be `None`")  # noqa: E501

        self._record_count = record_count

    @property
    def disposition_flag(self):
        """Gets the disposition_flag of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501

        Flag to determine if the transaction file is either a “TEST” or production “PRODUCTION” file based on the selected reserved word.  # noqa: E501

        :return: The disposition_flag of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :rtype: str
        """
        return self._disposition_flag

    @disposition_flag.setter
    def disposition_flag(self, disposition_flag):
        """Sets the disposition_flag of this TpoDataDTOsSharedSubmissionHeaderDTO.

        Flag to determine if the transaction file is either a “TEST” or production “PRODUCTION” file based on the selected reserved word.  # noqa: E501

        :param disposition_flag: The disposition_flag of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :type: str
        """
        if disposition_flag is None:
            raise ValueError("Invalid value for `disposition_flag`, must not be `None`")  # noqa: E501

        self._disposition_flag = disposition_flag

    @property
    def payer_id(self):
        """Gets the payer_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501

        PayerID is the Insurer License if the ReceiverID is TPA. If ReceiverID is Insurance, PayerID must be equal to ReceiverID.  # noqa: E501

        :return: The payer_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :rtype: str
        """
        return self._payer_id

    @payer_id.setter
    def payer_id(self, payer_id):
        """Sets the payer_id of this TpoDataDTOsSharedSubmissionHeaderDTO.

        PayerID is the Insurer License if the ReceiverID is TPA. If ReceiverID is Insurance, PayerID must be equal to ReceiverID.  # noqa: E501

        :param payer_id: The payer_id of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :type: str
        """
        if payer_id is None:
            raise ValueError("Invalid value for `payer_id`, must not be `None`")  # noqa: E501

        self._payer_id = payer_id

    @property
    def transaction_type(self):
        """Gets the transaction_type of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501

        Indicating Submission type: “Submission”, “Resubmission”, “Prescription-Dispense”, “Radiology-Dispense”, “Laboratory-Dispense”.  # noqa: E501

        :return: The transaction_type of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this TpoDataDTOsSharedSubmissionHeaderDTO.

        Indicating Submission type: “Submission”, “Resubmission”, “Prescription-Dispense”, “Radiology-Dispense”, “Laboratory-Dispense”.  # noqa: E501

        :param transaction_type: The transaction_type of this TpoDataDTOsSharedSubmissionHeaderDTO.  # noqa: E501
        :type: str
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsSharedSubmissionHeaderDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsSharedSubmissionHeaderDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
