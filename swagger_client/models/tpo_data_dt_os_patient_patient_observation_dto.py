# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsPatientPatientObservationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'patient_height': 'float',
        'patient_weight': 'float',
        'patient_blood_sugar': 'float',
        'pregnancy_status': 'str',
        'head_size': 'float',
        'occupation': 'str',
        'marital_status': 'str',
        'patient_status': 'str',
        'age': 'int'
    }

    attribute_map = {
        'patient_height': 'PatientHeight',
        'patient_weight': 'PatientWeight',
        'patient_blood_sugar': 'PatientBloodSugar',
        'pregnancy_status': 'PregnancyStatus',
        'head_size': 'HeadSize',
        'occupation': 'Occupation',
        'marital_status': 'MaritalStatus',
        'patient_status': 'PatientStatus',
        'age': 'Age'
    }

    def __init__(self, patient_height=None, patient_weight=None, patient_blood_sugar=None, pregnancy_status=None,
                 head_size=None, occupation=None, marital_status=None, patient_status=None, age=None):  # noqa: E501
        """TpoDataDTOsPatientPatientObservationDTO - a model defined in Swagger"""  # noqa: E501
        self._patient_height = None
        self._patient_weight = None
        self._patient_blood_sugar = None
        self._pregnancy_status = None
        self._head_size = None
        self._occupation = None
        self._marital_status = None
        self._patient_status = None
        self._age = None
        self.discriminator = None
        if patient_height is not None:
            self.patient_height = patient_height
        self.patient_weight = patient_weight
        if patient_blood_sugar is not None:
            self.patient_blood_sugar = patient_blood_sugar
        if pregnancy_status is not None:
            self.pregnancy_status = pregnancy_status
        if head_size is not None:
            self.head_size = head_size
        if occupation is not None:
            self.occupation = occupation
        if marital_status is not None:
            self.marital_status = marital_status
        if patient_status is not None:
            self.patient_status = patient_status
        if age is not None:
            self.age = age

    @property
    def patient_height(self):
        """Gets the patient_height of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        The Patient Height in CM  # noqa: E501

        :return: The patient_height of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: float
        """
        return self._patient_height

    @patient_height.setter
    def patient_height(self, patient_height):
        """Sets the patient_height of this TpoDataDTOsPatientPatientObservationDTO.

        The Patient Height in CM  # noqa: E501

        :param patient_height: The patient_height of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: float
        """

        self._patient_height = patient_height

    @property
    def patient_weight(self):
        """Gets the patient_weight of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        The Patient Weight in KG  # noqa: E501

        :return: The patient_weight of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: float
        """
        return self._patient_weight

    @patient_weight.setter
    def patient_weight(self, patient_weight):
        """Sets the patient_weight of this TpoDataDTOsPatientPatientObservationDTO.

        The Patient Weight in KG  # noqa: E501

        :param patient_weight: The patient_weight of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: float
        """
        if patient_weight is None:
            raise ValueError("Invalid value for `patient_weight`, must not be `None`")  # noqa: E501

        self._patient_weight = patient_weight

    @property
    def patient_blood_sugar(self):
        """Gets the patient_blood_sugar of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        Patient Blood Sugar in mmol/L or mg/dL  # noqa: E501

        :return: The patient_blood_sugar of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: float
        """
        return self._patient_blood_sugar

    @patient_blood_sugar.setter
    def patient_blood_sugar(self, patient_blood_sugar):
        """Sets the patient_blood_sugar of this TpoDataDTOsPatientPatientObservationDTO.

        Patient Blood Sugar in mmol/L or mg/dL  # noqa: E501

        :param patient_blood_sugar: The patient_blood_sugar of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: float
        """

        self._patient_blood_sugar = patient_blood_sugar

    @property
    def pregnancy_status(self):
        """Gets the pregnancy_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        Patient Pregnancy Status possible values (T1,T2, orT3)  # noqa: E501

        :return: The pregnancy_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: str
        """
        return self._pregnancy_status

    @pregnancy_status.setter
    def pregnancy_status(self, pregnancy_status):
        """Sets the pregnancy_status of this TpoDataDTOsPatientPatientObservationDTO.

        Patient Pregnancy Status possible values (T1,T2, orT3)  # noqa: E501

        :param pregnancy_status: The pregnancy_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: str
        """

        self._pregnancy_status = pregnancy_status

    @property
    def head_size(self):
        """Gets the head_size of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        The Patient Head Size in CM  # noqa: E501

        :return: The head_size of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: float
        """
        return self._head_size

    @head_size.setter
    def head_size(self, head_size):
        """Sets the head_size of this TpoDataDTOsPatientPatientObservationDTO.

        The Patient Head Size in CM  # noqa: E501

        :param head_size: The head_size of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: float
        """

        self._head_size = head_size

    @property
    def occupation(self):
        """Gets the occupation of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        Occupation  # noqa: E501

        :return: The occupation of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this TpoDataDTOsPatientPatientObservationDTO.

        Occupation  # noqa: E501

        :param occupation: The occupation of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: str
        """

        self._occupation = occupation

    @property
    def marital_status(self):
        """Gets the marital_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        Patient marital status  Values:  Single  Married  Other  # noqa: E501

        :return: The marital_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this TpoDataDTOsPatientPatientObservationDTO.

        Patient marital status  Values:  Single  Married  Other  # noqa: E501

        :param marital_status: The marital_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: str
        """

        self._marital_status = marital_status

    @property
    def patient_status(self):
        """Gets the patient_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        Patient status   Values:   Dead   Alive   Unknown  # noqa: E501

        :return: The patient_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: str
        """
        return self._patient_status

    @patient_status.setter
    def patient_status(self, patient_status):
        """Sets the patient_status of this TpoDataDTOsPatientPatientObservationDTO.

        Patient status   Values:   Dead   Alive   Unknown  # noqa: E501

        :param patient_status: The patient_status of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: str
        """

        self._patient_status = patient_status

    @property
    def age(self):
        """Gets the age of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501

        Patient age.  # noqa: E501

        :return: The age of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this TpoDataDTOsPatientPatientObservationDTO.

        Patient age.  # noqa: E501

        :param age: The age of this TpoDataDTOsPatientPatientObservationDTO.  # noqa: E501
        :type: int
        """

        self._age = age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsPatientPatientObservationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsPatientPatientObservationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
