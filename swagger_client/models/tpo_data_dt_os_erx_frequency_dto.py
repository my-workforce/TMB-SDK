# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsERXFrequencyDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_per_frequency': 'float',
        'frequency_value': 'float',
        'frequency_type': 'str',
        'dosage_as_needed': 'str'
    }

    attribute_map = {
        'unit_per_frequency': 'UnitPerFrequency',
        'frequency_value': 'FrequencyValue',
        'frequency_type': 'FrequencyType',
        'dosage_as_needed': 'DosageAsNeeded'
    }

    def __init__(self, unit_per_frequency=None, frequency_value=None, frequency_type=None,
                 dosage_as_needed=None):  # noqa: E501
        """TpoDataDTOsERXFrequencyDTO - a model defined in Swagger"""  # noqa: E501
        self._unit_per_frequency = None
        self._frequency_value = None
        self._frequency_type = None
        self._dosage_as_needed = None
        self.discriminator = None
        self.unit_per_frequency = unit_per_frequency
        self.frequency_value = frequency_value
        self.frequency_type = frequency_type
        if dosage_as_needed is not None:
            self.dosage_as_needed = dosage_as_needed

    @property
    def unit_per_frequency(self):
        """Gets the unit_per_frequency of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501

        Granular unit of the frequency  # noqa: E501

        :return: The unit_per_frequency of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :rtype: float
        """
        return self._unit_per_frequency

    @unit_per_frequency.setter
    def unit_per_frequency(self, unit_per_frequency):
        """Sets the unit_per_frequency of this TpoDataDTOsERXFrequencyDTO.

        Granular unit of the frequency  # noqa: E501

        :param unit_per_frequency: The unit_per_frequency of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :type: float
        """
        if unit_per_frequency is None:
            raise ValueError("Invalid value for `unit_per_frequency`, must not be `None`")  # noqa: E501

        self._unit_per_frequency = unit_per_frequency

    @property
    def frequency_value(self):
        """Gets the frequency_value of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501

        Number of repetitions for a given frequency  # noqa: E501

        :return: The frequency_value of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :rtype: float
        """
        return self._frequency_value

    @frequency_value.setter
    def frequency_value(self, frequency_value):
        """Sets the frequency_value of this TpoDataDTOsERXFrequencyDTO.

        Number of repetitions for a given frequency  # noqa: E501

        :param frequency_value: The frequency_value of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :type: float
        """
        if frequency_value is None:
            raise ValueError("Invalid value for `frequency_value`, must not be `None`")  # noqa: E501

        self._frequency_value = frequency_value

    @property
    def frequency_type(self):
        """Gets the frequency_type of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501

        Frequency time unit  Values:  Hour  Day  Week  Month  Once  # noqa: E501

        :return: The frequency_type of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :rtype: str
        """
        return self._frequency_type

    @frequency_type.setter
    def frequency_type(self, frequency_type):
        """Sets the frequency_type of this TpoDataDTOsERXFrequencyDTO.

        Frequency time unit  Values:  Hour  Day  Week  Month  Once  # noqa: E501

        :param frequency_type: The frequency_type of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :type: str
        """
        if frequency_type is None:
            raise ValueError("Invalid value for `frequency_type`, must not be `None`")  # noqa: E501

        self._frequency_type = frequency_type

    @property
    def dosage_as_needed(self):
        """Gets the dosage_as_needed of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501

        Dosage as needed  # noqa: E501

        :return: The dosage_as_needed of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :rtype: str
        """
        return self._dosage_as_needed

    @dosage_as_needed.setter
    def dosage_as_needed(self, dosage_as_needed):
        """Sets the dosage_as_needed of this TpoDataDTOsERXFrequencyDTO.

        Dosage as needed  # noqa: E501

        :param dosage_as_needed: The dosage_as_needed of this TpoDataDTOsERXFrequencyDTO.  # noqa: E501
        :type: str
        """

        self._dosage_as_needed = dosage_as_needed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsERXFrequencyDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsERXFrequencyDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
