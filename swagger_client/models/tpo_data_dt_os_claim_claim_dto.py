# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsClaimClaimDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'id_payer': 'str',
        'member_id': 'str',
        'manual_claim': 'bool',
        'date_ordered': 'str',
        'provider_id': 'str',
        'weight': 'float',
        'national_id_number': 'str',
        'height': 'float',
        'gross': 'float',
        'patient_share': 'float',
        'net': 'float',
        'dispense_reference_id': 'str',
        'encounter': 'TpoDataDTOsClaimEncounterDTO',
        'diagnosis': 'list[TpoDataDTOsSharedDiagnosisDTO]',
        'activity': 'list[TpoDataDTOsClaimActivityDTO]',
        'resubmission': 'TpoDataDTOsClaimResubmissionDTO',
        'supporting_information': 'TpoDataDTOsClaimSupportingInformationDTO'
    }

    attribute_map = {
        'id': 'ID',
        'id_payer': 'IDPayer',
        'member_id': 'MemberID',
        'manual_claim': 'ManualClaim',
        'date_ordered': 'DateOrdered',
        'provider_id': 'ProviderID',
        'weight': 'Weight',
        'national_id_number': 'NationalIDNumber',
        'height': 'Height',
        'gross': 'Gross',
        'patient_share': 'PatientShare',
        'net': 'Net',
        'dispense_reference_id': 'DispenseReferenceID',
        'encounter': 'Encounter',
        'diagnosis': 'Diagnosis',
        'activity': 'Activity',
        'resubmission': 'Resubmission',
        'supporting_information': 'SupportingInformation'
    }

    def __init__(self, id=None, id_payer=None, member_id=None, manual_claim=None, date_ordered=None, provider_id=None,
                 weight=None, national_id_number=None, height=None, gross=None, patient_share=None, net=None,
                 dispense_reference_id=None, encounter=None, diagnosis=None, activity=None, resubmission=None,
                 supporting_information=None):  # noqa: E501
        """TpoDataDTOsClaimClaimDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_payer = None
        self._member_id = None
        self._manual_claim = None
        self._date_ordered = None
        self._provider_id = None
        self._weight = None
        self._national_id_number = None
        self._height = None
        self._gross = None
        self._patient_share = None
        self._net = None
        self._dispense_reference_id = None
        self._encounter = None
        self._diagnosis = None
        self._activity = None
        self._resubmission = None
        self._supporting_information = None
        self.discriminator = None
        self.id = id
        if id_payer is not None:
            self.id_payer = id_payer
        self.member_id = member_id
        if manual_claim is not None:
            self.manual_claim = manual_claim
        if date_ordered is not None:
            self.date_ordered = date_ordered
        self.provider_id = provider_id
        self.weight = weight
        self.national_id_number = national_id_number
        if height is not None:
            self.height = height
        self.gross = gross
        self.patient_share = patient_share
        self.net = net
        if dispense_reference_id is not None:
            self.dispense_reference_id = dispense_reference_id
        self.encounter = encounter
        if diagnosis is not None:
            self.diagnosis = diagnosis
        if activity is not None:
            self.activity = activity
        if resubmission is not None:
            self.resubmission = resubmission
        if supporting_information is not None:
            self.supporting_information = supporting_information

    @property
    def id(self):
        """Gets the id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        Claim ID.  # noqa: E501

        :return: The id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpoDataDTOsClaimClaimDTO.

        Claim ID.  # noqa: E501

        :param id: The id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_payer(self):
        """Gets the id_payer of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The unique number assigned by an insurer to identify the Claim.  # noqa: E501

        :return: The id_payer of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_payer

    @id_payer.setter
    def id_payer(self, id_payer):
        """Sets the id_payer of this TpoDataDTOsClaimClaimDTO.

        The unique number assigned by an insurer to identify the Claim.  # noqa: E501

        :param id_payer: The id_payer of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: str
        """

        self._id_payer = id_payer

    @property
    def member_id(self):
        """Gets the member_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The patient's insurance member number, if the patient is claiming insurance.  # noqa: E501

        :return: The member_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this TpoDataDTOsClaimClaimDTO.

        The patient's insurance member number, if the patient is claiming insurance.  # noqa: E501

        :param member_id: The member_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: str
        """
        if member_id is None:
            raise ValueError("Invalid value for `member_id`, must not be `None`")  # noqa: E501

        self._member_id = member_id

    @property
    def manual_claim(self):
        """Gets the manual_claim of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        Manual claim.  # noqa: E501

        :return: The manual_claim of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: bool
        """
        return self._manual_claim

    @manual_claim.setter
    def manual_claim(self, manual_claim):
        """Sets the manual_claim of this TpoDataDTOsClaimClaimDTO.

        Manual claim.  # noqa: E501

        :param manual_claim: The manual_claim of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: bool
        """

        self._manual_claim = manual_claim

    @property
    def date_ordered(self):
        """Gets the date_ordered of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

         The date and time at which prescription ordered   Date Time format: DD/MM/YYYYY HH:MM  <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when submission type equals “Submission” and ManualClaim equal true  </p></div>  # noqa: E501

        :return: The date_ordered of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: str
        """
        return self._date_ordered

    @date_ordered.setter
    def date_ordered(self, date_ordered):
        """Sets the date_ordered of this TpoDataDTOsClaimClaimDTO.

         The date and time at which prescription ordered   Date Time format: DD/MM/YYYYY HH:MM  <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when submission type equals “Submission” and ManualClaim equal true  </p></div>  # noqa: E501

        :param date_ordered: The date_ordered of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: str
        """

        self._date_ordered = date_ordered

    @property
    def provider_id(self):
        """Gets the provider_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        ID of the provider claiming from the Payer.  # noqa: E501

        :return: The provider_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this TpoDataDTOsClaimClaimDTO.

        ID of the provider claiming from the Payer.  # noqa: E501

        :param provider_id: The provider_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def weight(self):
        """Gets the weight of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The patient's weight.  # noqa: E501

        :return: The weight of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this TpoDataDTOsClaimClaimDTO.

        The patient's weight.  # noqa: E501

        :param weight: The weight of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def national_id_number(self):
        """Gets the national_id_number of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The unique number the government assigns to a citizen.  # noqa: E501

        :return: The national_id_number of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: str
        """
        return self._national_id_number

    @national_id_number.setter
    def national_id_number(self, national_id_number):
        """Sets the national_id_number of this TpoDataDTOsClaimClaimDTO.

        The unique number the government assigns to a citizen.  # noqa: E501

        :param national_id_number: The national_id_number of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: str
        """
        if national_id_number is None:
            raise ValueError("Invalid value for `national_id_number`, must not be `None`")  # noqa: E501

        self._national_id_number = national_id_number

    @property
    def height(self):
        """Gets the height of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The patient's height in cm  # noqa: E501

        :return: The height of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TpoDataDTOsClaimClaimDTO.

        The patient's height in cm  # noqa: E501

        :param height: The height of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def gross(self):
        """Gets the gross of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The total amount of the charges included on the Claim.  # noqa: E501

        :return: The gross of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: float
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this TpoDataDTOsClaimClaimDTO.

        The total amount of the charges included on the Claim.  # noqa: E501

        :param gross: The gross of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: float
        """
        if gross is None:
            raise ValueError("Invalid value for `gross`, must not be `None`")  # noqa: E501

        self._gross = gross

    @property
    def patient_share(self):
        """Gets the patient_share of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The amount a patient owes a provider according to the terms of their insurance plan/product.  # noqa: E501

        :return: The patient_share of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: float
        """
        return self._patient_share

    @patient_share.setter
    def patient_share(self, patient_share):
        """Sets the patient_share of this TpoDataDTOsClaimClaimDTO.

        The amount a patient owes a provider according to the terms of their insurance plan/product.  # noqa: E501

        :param patient_share: The patient_share of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: float
        """
        if patient_share is None:
            raise ValueError("Invalid value for `patient_share`, must not be `None`")  # noqa: E501

        self._patient_share = patient_share

    @property
    def net(self):
        """Gets the net of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The net charges included on the Claim. This is the amount the provider is expected to be paid.  # noqa: E501

        :return: The net of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this TpoDataDTOsClaimClaimDTO.

        The net charges included on the Claim. This is the amount the provider is expected to be paid.  # noqa: E501

        :param net: The net of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: float
        """
        if net is None:
            raise ValueError("Invalid value for `net`, must not be `None`")  # noqa: E501

        self._net = net

    @property
    def dispense_reference_id(self):
        """Gets the dispense_reference_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        The unique number assigned to the request dispense. This is the Reference Number for Erx              <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when submission type equals “Prescription-Dispense”              </p></div>  # noqa: E501

        :return: The dispense_reference_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: str
        """
        return self._dispense_reference_id

    @dispense_reference_id.setter
    def dispense_reference_id(self, dispense_reference_id):
        """Sets the dispense_reference_id of this TpoDataDTOsClaimClaimDTO.

        The unique number assigned to the request dispense. This is the Reference Number for Erx              <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when submission type equals “Prescription-Dispense”              </p></div>  # noqa: E501

        :param dispense_reference_id: The dispense_reference_id of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: str
        """

        self._dispense_reference_id = dispense_reference_id

    @property
    def encounter(self):
        """Gets the encounter of this TpoDataDTOsClaimClaimDTO.  # noqa: E501


        :return: The encounter of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: TpoDataDTOsClaimEncounterDTO
        """
        return self._encounter

    @encounter.setter
    def encounter(self, encounter):
        """Sets the encounter of this TpoDataDTOsClaimClaimDTO.


        :param encounter: The encounter of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: TpoDataDTOsClaimEncounterDTO
        """
        if encounter is None:
            raise ValueError("Invalid value for `encounter`, must not be `None`")  # noqa: E501

        self._encounter = encounter

    @property
    def diagnosis(self):
        """Gets the diagnosis of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        Claim Diagnosis.  # noqa: E501

        :return: The diagnosis of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: list[TpoDataDTOsSharedDiagnosisDTO]
        """
        return self._diagnosis

    @diagnosis.setter
    def diagnosis(self, diagnosis):
        """Sets the diagnosis of this TpoDataDTOsClaimClaimDTO.

        Claim Diagnosis.  # noqa: E501

        :param diagnosis: The diagnosis of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: list[TpoDataDTOsSharedDiagnosisDTO]
        """

        self._diagnosis = diagnosis

    @property
    def activity(self):
        """Gets the activity of this TpoDataDTOsClaimClaimDTO.  # noqa: E501

        Claim Activities.  # noqa: E501

        :return: The activity of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: list[TpoDataDTOsClaimActivityDTO]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this TpoDataDTOsClaimClaimDTO.

        Claim Activities.  # noqa: E501

        :param activity: The activity of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: list[TpoDataDTOsClaimActivityDTO]
        """

        self._activity = activity

    @property
    def resubmission(self):
        """Gets the resubmission of this TpoDataDTOsClaimClaimDTO.  # noqa: E501


        :return: The resubmission of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: TpoDataDTOsClaimResubmissionDTO
        """
        return self._resubmission

    @resubmission.setter
    def resubmission(self, resubmission):
        """Sets the resubmission of this TpoDataDTOsClaimClaimDTO.


        :param resubmission: The resubmission of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: TpoDataDTOsClaimResubmissionDTO
        """

        self._resubmission = resubmission

    @property
    def supporting_information(self):
        """Gets the supporting_information of this TpoDataDTOsClaimClaimDTO.  # noqa: E501


        :return: The supporting_information of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :rtype: TpoDataDTOsClaimSupportingInformationDTO
        """
        return self._supporting_information

    @supporting_information.setter
    def supporting_information(self, supporting_information):
        """Sets the supporting_information of this TpoDataDTOsClaimClaimDTO.


        :param supporting_information: The supporting_information of this TpoDataDTOsClaimClaimDTO.  # noqa: E501
        :type: TpoDataDTOsClaimSupportingInformationDTO
        """

        self._supporting_information = supporting_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsClaimClaimDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsClaimClaimDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
