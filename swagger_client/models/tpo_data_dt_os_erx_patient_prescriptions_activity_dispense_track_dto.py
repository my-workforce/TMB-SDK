# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refill_number': 'int',
        'code': 'str',
        'activity_description': 'str',
        'dispense_date': 'str',
        'dispensed_quantity': 'float'
    }

    attribute_map = {
        'refill_number': 'refillNumber',
        'code': 'Code',
        'activity_description': 'ActivityDescription',
        'dispense_date': 'DispenseDate',
        'dispensed_quantity': 'DispensedQuantity'
    }

    def __init__(self, refill_number=None, code=None, activity_description=None, dispense_date=None,
                 dispensed_quantity=None):  # noqa: E501
        """TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO - a model defined in Swagger"""  # noqa: E501
        self._refill_number = None
        self._code = None
        self._activity_description = None
        self._dispense_date = None
        self._dispensed_quantity = None
        self.discriminator = None
        if refill_number is not None:
            self.refill_number = refill_number
        if code is not None:
            self.code = code
        if activity_description is not None:
            self.activity_description = activity_description
        if dispense_date is not None:
            self.dispense_date = dispense_date
        if dispensed_quantity is not None:
            self.dispensed_quantity = dispensed_quantity

    @property
    def refill_number(self):
        """Gets the refill_number of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501

        Which refill the dispense made on  # noqa: E501

        :return: The refill_number of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :rtype: int
        """
        return self._refill_number

    @refill_number.setter
    def refill_number(self, refill_number):
        """Sets the refill_number of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.

        Which refill the dispense made on  # noqa: E501

        :param refill_number: The refill_number of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :type: int
        """

        self._refill_number = refill_number

    @property
    def code(self):
        """Gets the code of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501


        :return: The code of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.


        :param code: The code of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def activity_description(self):
        """Gets the activity_description of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501


        :return: The activity_description of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :rtype: str
        """
        return self._activity_description

    @activity_description.setter
    def activity_description(self, activity_description):
        """Sets the activity_description of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.


        :param activity_description: The activity_description of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :type: str
        """

        self._activity_description = activity_description

    @property
    def dispense_date(self):
        """Gets the dispense_date of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501

        Dispensed date  # noqa: E501

        :return: The dispense_date of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :rtype: str
        """
        return self._dispense_date

    @dispense_date.setter
    def dispense_date(self, dispense_date):
        """Sets the dispense_date of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.

        Dispensed date  # noqa: E501

        :param dispense_date: The dispense_date of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :type: str
        """

        self._dispense_date = dispense_date

    @property
    def dispensed_quantity(self):
        """Gets the dispensed_quantity of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501


        :return: The dispensed_quantity of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :rtype: float
        """
        return self._dispensed_quantity

    @dispensed_quantity.setter
    def dispensed_quantity(self, dispensed_quantity):
        """Sets the dispensed_quantity of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.


        :param dispensed_quantity: The dispensed_quantity of this TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO.  # noqa: E501
        :type: float
        """

        self._dispensed_quantity = dispensed_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsERXPatientPrescriptionsActivityDispenseTrackDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
