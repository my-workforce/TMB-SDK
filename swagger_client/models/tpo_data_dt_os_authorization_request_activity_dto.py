# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsAuthorizationRequestActivityDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'activity_reference': 'str',
        'start': 'str',
        'alternative_reason': 'str',
        'type': 'str',
        'code': 'str',
        'quantity': 'float',
        'unit_id': 'int',
        'net': 'float',
        'clinician': 'str',
        'duration': 'float',
        'observation': 'list[TpoDataDTOsSharedObservationDTO]'
    }

    attribute_map = {
        'id': 'ID',
        'activity_reference': 'ActivityReference',
        'start': 'Start',
        'alternative_reason': 'AlternativeReason',
        'type': 'Type',
        'code': 'Code',
        'quantity': 'Quantity',
        'unit_id': 'UnitId',
        'net': 'Net',
        'clinician': 'Clinician',
        'duration': 'Duration',
        'observation': 'Observation'
    }

    def __init__(self, id=None, activity_reference=None, start=None, alternative_reason=None, type=None, code=None,
                 quantity=None, unit_id=None, net=None, clinician=None, duration=None, observation=None):  # noqa: E501
        """TpoDataDTOsAuthorizationRequestActivityDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._activity_reference = None
        self._start = None
        self._alternative_reason = None
        self._type = None
        self._code = None
        self._quantity = None
        self._unit_id = None
        self._net = None
        self._clinician = None
        self._duration = None
        self._observation = None
        self.discriminator = None
        self.id = id
        if activity_reference is not None:
            self.activity_reference = activity_reference
        self.start = start
        if alternative_reason is not None:
            self.alternative_reason = alternative_reason
        self.type = type
        self.code = code
        self.quantity = quantity
        self.unit_id = unit_id
        self.net = net
        self.clinician = clinician
        self.duration = duration
        if observation is not None:
            self.observation = observation

    @property
    def id(self):
        """Gets the id of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        Unique identifier of activity within a Authorization  # noqa: E501

        :return: The id of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpoDataDTOsAuthorizationRequestActivityDTO.

        Unique identifier of activity within a Authorization  # noqa: E501

        :param id: The id of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def activity_reference(self):
        """Gets the activity_reference of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

         The Activity ID for the transaction user wants to authorize.  <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when authorization request type equals “Prescription”  </p></div>  # noqa: E501

        :return: The activity_reference of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._activity_reference

    @activity_reference.setter
    def activity_reference(self, activity_reference):
        """Sets the activity_reference of this TpoDataDTOsAuthorizationRequestActivityDTO.

         The Activity ID for the transaction user wants to authorize.  <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when authorization request type equals “Prescription”  </p></div>  # noqa: E501

        :param activity_reference: The activity_reference of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: str
        """

        self._activity_reference = activity_reference

    @property
    def start(self):
        """Gets the start of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        The date and time at which Activity started             Date Time format: DD/MM/YYYYY HH:MM.  # noqa: E501

        :return: The start of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TpoDataDTOsAuthorizationRequestActivityDTO.

        The date and time at which Activity started             Date Time format: DD/MM/YYYYY HH:MM.  # noqa: E501

        :param start: The start of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def alternative_reason(self):
        """Gets the alternative_reason of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

         The reason for alternative dispensing.  <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when dispensing is an alternative drug  </p></div>  # noqa: E501

        :return: The alternative_reason of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._alternative_reason

    @alternative_reason.setter
    def alternative_reason(self, alternative_reason):
        """Sets the alternative_reason of this TpoDataDTOsAuthorizationRequestActivityDTO.

         The reason for alternative dispensing.  <div><p><strong style=\"border: 5% solid #584c7e;padding:1px;border-radius: 5%;background: #584c7e;color:white;\"> Conditional required</strong> required when dispensing is an alternative drug  </p></div>  # noqa: E501

        :param alternative_reason: The alternative_reason of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: str
        """

        self._alternative_reason = alternative_reason

    @property
    def type(self):
        """Gets the type of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        The type of activity. 3 = CPT; 4 = HCPCS; 5 = Drug; 6 = Dental; 8 = Service Code; 9 = DRG; 10 = Scientific Code  # noqa: E501

        :return: The type of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TpoDataDTOsAuthorizationRequestActivityDTO.

        The type of activity. 3 = CPT; 4 = HCPCS; 5 = Drug; 6 = Dental; 8 = Service Code; 9 = DRG; 10 = Scientific Code  # noqa: E501

        :param type: The type of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def code(self):
        """Gets the code of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        ActivityCode is the code, specified by ActivityType, for the Activity performed.  # noqa: E501

        :return: The code of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TpoDataDTOsAuthorizationRequestActivityDTO.

        ActivityCode is the code, specified by ActivityType, for the Activity performed.  # noqa: E501

        :param code: The code of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def quantity(self):
        """Gets the quantity of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        Identifies the number of units (quantity) for a specific Activity.  # noqa: E501

        :return: The quantity of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this TpoDataDTOsAuthorizationRequestActivityDTO.

        Identifies the number of units (quantity) for a specific Activity.  # noqa: E501

        :param quantity: The quantity of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def unit_id(self):
        """Gets the unit_id of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        Identifies the type of units  for a specific Activity.  # noqa: E501

        :return: The unit_id of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """Sets the unit_id of this TpoDataDTOsAuthorizationRequestActivityDTO.

        Identifies the type of units  for a specific Activity.  # noqa: E501

        :param unit_id: The unit_id of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: int
        """
        if unit_id is None:
            raise ValueError("Invalid value for `unit_id`, must not be `None`")  # noqa: E501

        self._unit_id = unit_id

    @property
    def net(self):
        """Gets the net of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        The net charges billed by the provider to the Payer for this Activity.  # noqa: E501

        :return: The net of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this TpoDataDTOsAuthorizationRequestActivityDTO.

        The net charges billed by the provider to the Payer for this Activity.  # noqa: E501

        :param net: The net of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: float
        """
        if net is None:
            raise ValueError("Invalid value for `net`, must not be `None`")  # noqa: E501

        self._net = net

    @property
    def clinician(self):
        """Gets the clinician of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        License number of the Clinician who is providing the treatment or care for the patient.  # noqa: E501

        :return: The clinician of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: str
        """
        return self._clinician

    @clinician.setter
    def clinician(self, clinician):
        """Sets the clinician of this TpoDataDTOsAuthorizationRequestActivityDTO.

        License number of the Clinician who is providing the treatment or care for the patient.  # noqa: E501

        :param clinician: The clinician of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: str
        """
        if clinician is None:
            raise ValueError("Invalid value for `clinician`, must not be `None`")  # noqa: E501

        self._clinician = clinician

    @property
    def duration(self):
        """Gets the duration of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        Identifies the duration in days for the prescribed activity.  # noqa: E501

        :return: The duration of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TpoDataDTOsAuthorizationRequestActivityDTO.

        Identifies the duration in days for the prescribed activity.  # noqa: E501

        :param duration: The duration of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def observation(self):
        """Gets the observation of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501

        Activity Observations  # noqa: E501

        :return: The observation of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :rtype: list[TpoDataDTOsSharedObservationDTO]
        """
        return self._observation

    @observation.setter
    def observation(self, observation):
        """Sets the observation of this TpoDataDTOsAuthorizationRequestActivityDTO.

        Activity Observations  # noqa: E501

        :param observation: The observation of this TpoDataDTOsAuthorizationRequestActivityDTO.  # noqa: E501
        :type: list[TpoDataDTOsSharedObservationDTO]
        """

        self._observation = observation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsAuthorizationRequestActivityDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsAuthorizationRequestActivityDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
