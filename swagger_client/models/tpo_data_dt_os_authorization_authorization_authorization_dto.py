# coding: utf-8

"""
    Transaction Management Bus (TMB) API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: V3.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'str',
        'id': 'str',
        'id_payer': 'str',
        'denial_code': 'str',
        'start': 'str',
        'end': 'str',
        'limit': 'float',
        'comments': 'str',
        'activity': 'list[TpoDataDTOsAuthorizationAuthorizationActivityDTO]'
    }

    attribute_map = {
        'result': 'Result',
        'id': 'ID',
        'id_payer': 'IDPayer',
        'denial_code': 'DenialCode',
        'start': 'Start',
        'end': 'End',
        'limit': 'Limit',
        'comments': 'Comments',
        'activity': 'Activity'
    }

    def __init__(self, result=None, id=None, id_payer=None, denial_code=None, start=None, end=None, limit=None,
                 comments=None, activity=None):  # noqa: E501
        """TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._id = None
        self._id_payer = None
        self._denial_code = None
        self._start = None
        self._end = None
        self._limit = None
        self._comments = None
        self._activity = None
        self.discriminator = None
        if result is not None:
            self.result = result
        self.id = id
        if id_payer is not None:
            self.id_payer = id_payer
        if denial_code is not None:
            self.denial_code = denial_code
        self.start = start
        self.end = end
        if limit is not None:
            self.limit = limit
        if comments is not None:
            self.comments = comments
        if activity is not None:
            self.activity = activity

    @property
    def result(self):
        """Gets the result of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        The answer of the inquiry can be one of the following (Yes, No or Pending).  # noqa: E501

        :return: The result of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        The answer of the inquiry can be one of the following (Yes, No or Pending).  # noqa: E501

        :param result: The result of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def id(self):
        """Gets the id of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        Authorization ID.  # noqa: E501

        :return: The id of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        Authorization ID.  # noqa: E501

        :param id: The id of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id_payer(self):
        """Gets the id_payer of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        The unique number assigned by an insurer to identify the Claim.  # noqa: E501

        :return: The id_payer of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: str
        """
        return self._id_payer

    @id_payer.setter
    def id_payer(self, id_payer):
        """Sets the id_payer of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        The unique number assigned by an insurer to identify the Claim.  # noqa: E501

        :param id_payer: The id_payer of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: str
        """

        self._id_payer = id_payer

    @property
    def denial_code(self):
        """Gets the denial_code of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        The denial code if the claim is denied by the payer.  # noqa: E501

        :return: The denial_code of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: str
        """
        return self._denial_code

    @denial_code.setter
    def denial_code(self, denial_code):
        """Sets the denial_code of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        The denial code if the claim is denied by the payer.  # noqa: E501

        :param denial_code: The denial_code of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: str
        """

        self._denial_code = denial_code

    @property
    def start(self):
        """Gets the start of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        The date and time at started  Date Time format: DD/MM/YYYYY HH:MM  # noqa: E501

        :return: The start of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        The date and time at started  Date Time format: DD/MM/YYYYY HH:MM  # noqa: E501

        :param start: The start of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        The date and time at ended  Date Time format: DD/MM/YYYYY HH:MM  # noqa: E501

        :return: The end of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        The date and time at ended  Date Time format: DD/MM/YYYYY HH:MM  # noqa: E501

        :param end: The end of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def limit(self):
        """Gets the limit of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        Identifies the Authorization Limit.  # noqa: E501

        :return: The limit of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        Identifies the Authorization Limit.  # noqa: E501

        :param limit: The limit of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: float
        """

        self._limit = limit

    @property
    def comments(self):
        """Gets the comments of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        The comments given to add more details on the Authorization.  # noqa: E501

        :return: The comments of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        The comments given to add more details on the Authorization.  # noqa: E501

        :param comments: The comments of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def activity(self):
        """Gets the activity of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501

        Authorization Activity.  # noqa: E501

        :return: The activity of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :rtype: list[TpoDataDTOsAuthorizationAuthorizationActivityDTO]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.

        Authorization Activity.  # noqa: E501

        :param activity: The activity of this TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO.  # noqa: E501
        :type: list[TpoDataDTOsAuthorizationAuthorizationActivityDTO]
        """

        self._activity = activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TpoDataDTOsAuthorizationAuthorizationAuthorizationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
